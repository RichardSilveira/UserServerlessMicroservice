service: userservice

provider:
  name: aws
  profile: default
  runtime: dotnetcore3.1
  stage: dev
  region: us-east-1
  memorySize: 512
  timeout: 30
  apiKeys:
    - companyUsagePlan:
        - company-shared-key # this key can be used for a Custom Authorizer
  usagePlan:
    - companyUsagePlan:
        throttle:
          burstLimit: 100
          rateLimit: 200
        quota:
          limit: 200_000
          period: MONTH
  environment:
    STAGE: dev

package:
  artifact: bin/Release/netcoreapp3.1/userService.zip

functions:
  addNewUser:
    handler: UserService::UserService.Functions.AddNewUserFunction::Handle
    # provisionedConcurrency: 2 # optional, Count of provisioned lambda instances
    events:
      - http:
          path: v1/users/
          method: post
          cors: true

  updateUser:
    handler: UserService::UserService.Functions.UpdateUserFunction::Handle
    # provisionedConcurrency: 2 # optional, Count of provisioned lambda instances
    events:
      - http:
          path: v1/users/{userid}
          method: put
          cors: true

  deleteUser:
    handler: UserService::UserService.Functions.DeleteUserFunction::Handle
    # provisionedConcurrency: 2 # optional, Count of provisioned lambda instances
    events:
      - http:
          path: v1/users/{userid}
          method: delete
          cors: true

  getUserById:
    handler: UserService::UserService.Functions.GetUserByIdFunction::Handle
    # provisionedConcurrency: 2 # optional, Count of provisioned lambda instances
    events:
      - http:
          path: v1/users/{userid}
          method: get
          cors: true
          
esources:
 Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    FailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '500'