# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: userservice
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: dotnetcore3.1
  stage: dev
  region: us-east-1
  memorySize: 512
  timeout: 30
  apiKeys:
    - companyUsagePlan:
        - company-shared-key # this key can be used for a Custom Authorizer
  usagePlan:
    - companyUsagePlan:
        throttle:
          burstLimit: 100
          rateLimit: 200
        quota:
          limit: 200_000
          period: MONTH
  environment:
    STAGE: dev
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  artifact: bin/Release/netcoreapp3.1/userService.zip

functions:
  addNewUser:
    handler: UserService::UserService.Functions.AddNewUserFunction::Handle
    # provisionedConcurrency: 2 # optional, Count of provisioned lambda instances
    events:
      - http:
          path: v1/users/
          method: post

  updateUser:
    handler: UserService::UserService.Functions.UpdateUserFunction::Handle
    # provisionedConcurrency: 2 # optional, Count of provisioned lambda instances
    events:
      - http:
          path: v1/users/{userid}
          method: put

  deleteUser:
    handler: UserService::UserService.Functions.DeleteUserFunction::Handle
    # provisionedConcurrency: 2 # optional, Count of provisioned lambda instances
    events:
      - http:
          path: v1/users/{userid}
          method: delete

  getUserById:
    handler: UserService::UserService.Functions.GetUserByIdFunction::Handle
    # provisionedConcurrency: 2 # optional, Count of provisioned lambda instances
    events:
      - http:
          path: v1/users/{userid}
          method: get